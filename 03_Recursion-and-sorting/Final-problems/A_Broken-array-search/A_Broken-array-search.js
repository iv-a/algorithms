/*

-- ПРИНЦИП РАБОТЫ --
Принцип работы основан на бинарном поиске: на каждом шаге массив элементов делится на две части
и в работе остается та половина, в которой находится искомый элемент. То, как определяется нужная
половина, описано далее.

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
1. Средний элемент больше или равен крайнему левому
  1.1. Средний элемент меньше искомого. В этом случае искомый элемент может находиться
       только в правой половине массива.
  1.2. Крайний левый элемент больше искомого. В этом случае из п.1. следует, что
       средний элемент точно больше искомого, а значит искомый элемент также может находиться
       только в правой половине массива.
  1.3. Средний элемент больше искомого, а крайний левый элемент меньше искомого.
       В этом случае искомый элемент может находиться только в левой половине массива.

             1.1                        1.2                         1.3
       ┃                          ┃                           ┃
       ┃         ●                ┃         ●                 ┃         ●
       ┃        ○                 ┃        ●                  ┃        ●
       ┃       ●┊                 ┃       ●                   ┃       ●
       ┃      ● ┊                 ┃      ●                    ┃      ●
       ┃     ●┊ ┊                 ┃     ●┊                    ┃     ●┊
       ┃    ● ┊ ┊                 ┃    ● ┊                    ┃    ● ┊
       ┃   ●  ┊ ┊                 ┃   ●  ┊                    ┃   ●  ┊
       ┃  ●   ┊ ┊                 ┃  ●   ┊                    ┃  ○   ┊
       ┃ ●    ┊ ┊                 ┃ ●    ┊                    ┃ ●┊   ┊
       ┃●     ┊ ┊                 ┃●     ┊                    ┃● ┊   ┊
       ┃┊     ┊ ┊   ●             ┃┊     ┊     ●              ┃┊ ┊   ┊     ●
       ┃┊     ┊ ┊  ●┊             ┃┊     ┊    ●┊              ┃┊ ┊   ┊    ●┊
       ┃┊     ┊ ┊ ● ┊             ┃┊     ┊   ○ ┊              ┃┊ ┊   ┊   ● ┊
        ▔▔▔▔▔▔▔▔             ▔▔▔▔▔▔▔▔              ▔▔▔▔▔▔▔▔
        l     m k   r              l     m   k r               l k   m     r

2. Средний элемент меньше крайнего левого.
  2.1. Средний элемент больше искомого. В этом случае искомый элемент может находиться только
       в левой половине массива. Поскольку любой элемент из правой половины будет больше среднего,
       а значит и больше искомого.
  2.2. Крайний правый элемент меньше искомого. Поскольку средний элемент меньше крайнего левого, то
       любой элемент из правой половины будет меньше крайнего левого, а значит искомый элемент может
       находиться только в левой половине.
  2.3. Средний элемент меньше искомого, а крайний правый больше искомого.
       В этом случае искомый элемент может находиться только в правой половине массива.

             2.1                        2.2                         2.3
       ┃                          ┃                           ┃
       ┃   ●                      ┃   ●                       ┃   ●
       ┃  ●                       ┃  ○                        ┃  ●
       ┃ ●                        ┃ ●┊                        ┃ ●
       ┃●                         ┃● ┊                        ┃●
       ┃┊           ●             ┃┊ ┊         ●              ┃┊           ●
       ┃┊          ●┊             ┃┊ ┊        ●┊              ┃┊          ●┊
       ┃┊         ● ┊             ┃┊ ┊       ● ┊              ┃┊         ● ┊
       ┃┊        ●  ┊             ┃┊ ┊      ●  ┊              ┃┊        ○  ┊
       ┃┊       ●   ┊             ┃┊ ┊     ●   ┊              ┃┊       ●┊  ┊
       ┃┊      ●    ┊             ┃┊ ┊    ●    ┊              ┃┊      ● ┊  ┊
       ┃┊     ●     ┊             ┃┊ ┊   ●     ┊              ┃┊     ●  ┊  ┊
       ┃┊    ●┊     ┊             ┃┊ ┊  ●┊     ┊              ┃┊    ●┊  ┊  ┊
       ┃┊   ○ ┊     ┊             ┃┊ ┊ ● ┊     ┊              ┃┊   ● ┊  ┊  ┊
        ▔▔▔▔▔▔▔▔             ▔▔▔▔▔▔▔▔              ▔▔▔▔▔▔▔▔
        l   k m     r              l k   m     r               l     m  k  r

Таким образом описаны все возможные случаи и решение будет  корректно работать для каждого из них.

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
Поскольку решение основано на бинарном поиске, функция brokenSearch способна обеспечить
возможность находить элемент в массиве за O(log n) (общее время).

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
Алгоритм потребляет O(1) дополнительной памяти лишь для хранения указателей l, r, mid.
*/

function brokenSearch(arr, k) {
  let l = 0, r = arr.length - 1;
  while (l <= r) {
    let mid = ~~((l + r) / 2);
    if (arr[mid] === k) return mid;

    if (arr[l] <= arr[mid]) {
      if (arr[mid] < k || arr[l] > k) {
        l = mid + 1;
      } else {
        r = mid - 1;
      }
    } else {
      if (arr[mid] > k || arr[r] < k) {
        r = mid - 1;
      } else {
        l = mid + 1;
      }
    }
  }
  return -1;
}